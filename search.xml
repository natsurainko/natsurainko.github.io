<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ConnectX 服务端部署指南</title>
      <link href="/2025/03/17/ConnectX%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/17/ConnectX%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="ConnectX-是什么"><a href="#ConnectX-是什么" class="headerlink" title="ConnectX 是什么"></a>ConnectX 是什么</h2><p>ConnectX 是一个跨平台的 Minecraft P2P 在线多人库，支持异地跨网联机，采用 C# 开发，使用高性能套接字实现出色的转发性能，由 Zerotier SDK 实现 P2P 功能。<br>Github 仓库地址：<a href="https://github.com/Corona-Studio/ConnectX">https://github.com/Corona-Studio/ConnectX</a></p><h2 id="ConnectX-服务端部署指南"><a href="#ConnectX-服务端部署指南" class="headerlink" title="ConnectX 服务端部署指南"></a>ConnectX 服务端部署指南</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>一台装有 <code>Visual Studio</code>，且安装了 <code>.NET 桌面开发</code> 工作负荷，用于编译 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code> 的可执行文件</li><li>一台拥有公网的服务器，用于部署 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code> 服务</li></ul><blockquote><p>服务器系统推荐使用 Ubuntu 22.04 或者是 Windows Server，因为后续需要安装 .NET 9 运行时（本人在 Ubuntu 24.04 上安装 .NET 9 没成功..）  </p></blockquote><h3 id="编译可执行文件"><a href="#编译可执行文件" class="headerlink" title="编译可执行文件"></a>编译可执行文件</h3><ol><li><p>Clone 本项目仓库到本地</p></li><li><p>使用 Visual Studio 打开本项目</p></li><li><p>编辑项目文件（可选）</p></li></ol><p>如果你不想为 <code>ConnectX.Server</code>  另外单独配置 Sql 数据库服务，你可以将 <code>Program.cs</code> 文件中的以下几行代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;RoomOpsHistoryContext&gt;(o =&gt;</span><br><span class="line">    o.UseSqlServer(connectionString, b =&gt; b.MigrationsAssembly(<span class="string">&quot;ConnectX.Server&quot;</span>)));</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;RoomOpsHistoryContext&gt;(o =&gt;</span><br><span class="line">    o.UseSqlite(connectionString, b =&gt; b.MigrationsAssembly(<span class="string">&quot;ConnectX.Server&quot;</span>)));</span><br></pre></td></tr></table></figure><p>它会让你的 <code>ConnectX.Server</code> 运行时使用 Sqlite 本地数据库</p><ol start="4"><li>发布项目 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code></li></ol><p>请根据你的服务器系统选择目标平台是 <code>linux-x64</code> 还是 <code>win-x64</code> 或者其他，部署模式选择 <code>依赖框架</code> ，文件发布选项启用 <code>生成单个文件</code></p><blockquote><p>[!IMPORTANT]<br>现阶段请不要为 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code> 启用 <code>PublishAOT</code> ，这可能会导致运行不正常</p></blockquote><h3 id="部署-Zerotier-服务"><a href="#部署-Zerotier-服务" class="headerlink" title="部署 Zerotier 服务"></a>部署 Zerotier 服务</h3><p><code>ConnectX.Server</code> 需要 <code>Zerotier 控制器</code> 前置服务</p><ol><li>安装 Zerotier</li></ol><p>前往 <a href="https://www.zerotier.com/download/">Download Zerotier</a>，选择适合你的服务器系统的版本安装</p><ol start="2"><li>配置 Zerotier</li></ol><p>设置 Zerotier 开机启动，如果你是 linux ，请输入 <code>systemctl enable zerotier-one</code> ，Windows 安装完后默认可以在任务管理器里面看到开机启动  </p><p>验证 Zerotier 是否启动成功，在终端中输入 <code>zerotier-cli info</code> ，<br>如果出现 <code>200 info 495b749d3c 1.14.2 TUNNELED</code> 或者是 <code>200 info 495b749d3c 1.14.2 ONLINE</code> 的字样则说明成功</p><ol start="3"><li>获取 Zerotier 服务信息</li></ol><p>linux 下 Zerotier 的数据文件夹在 <code>/var/lib/zerotier-one</code> 目录下，<br>Windows 下 Zerotier 的数据文件夹在 <code>C:\ProgramData\ZeroTier\One</code> 目录下</p><p>其中 <code>authtoken.secret</code> 储存的是 Zerotier 控制器的访问 Token ，请记下它<br><code>zerotier-one.port</code> 储存的是 Zerotier 控制器的访问访问端口，默认为 <code>9993</code> ，请记下它</p><ol start="4"><li>部署 Zerotier Moon 卫星级服务器 （可选）</li></ol><p>请参考这篇文章：<a href="https://www.wnark.com/archives/152.html">https://www.wnark.com/archives/152.html</a>  </p><blockquote><p>[!IMPORTANT]<br>暂不清楚部署 Moon 卫星级服务器到底能不能对 P2P 连接起到正向作用，需要验证</p></blockquote><ol start="5"><li>放行 Zerotier 控制器端口 (Tcp&#x2F;Udp)</li></ol><h3 id="部署-ConnectX-Server-以及-ConnectX-Relay-服务"><a href="#部署-ConnectX-Server-以及-ConnectX-Relay-服务" class="headerlink" title="部署 ConnectX.Server 以及 ConnectX.Relay 服务"></a>部署 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code> 服务</h3><ol><li><p>将先前发布的可执行文件及其依赖 Dll 上传到服务器，连同发布目录下的 <code>appsettings.json</code> 一起上传</p></li><li><p>配置 <code>ConnectX.Server</code></p></li></ol><p>修改 <code>Server:ListenAddress</code> 为 <code>0.0.0.0</code><br>修改 <code>Server:ServerId</code> 为一个 Guid 字符串，例 <code>ddad03b9-d122-421d-add7-1d09e65b4295</code><br>修改 <code>ZeroTier:EndPoint</code> 为 <code>http://127.0.0.1:&#123;port&#125;</code> ，其中 <code>&#123;port&#125;</code> 为之前你记下的 Zerotier 控制器服务的端口<br>修改 <code>ZeroTier:Token</code> 为之前你记下的 Zerotier 控制器服务的访问 Token<br>修改 <code>ConnectionStrings:Default</code> 为你的 Sql 数据库，如果你在前面修改代码使用了 Sqlite ，请将该项写入为 <code>Data Source=Sqlite.db</code> ，运行后会自动生成 <code>Sqlite.db</code> 文件作为数据库</p><ol start="3"><li>配置 <code>ConnectX.Relay</code></li></ol><p>修改 <code>RelayServer:ListenAddress</code> 为 <code>0.0.0.0</code><br>修改 <code>RelayServer:PublicListenAddress</code> 为运行 <code>ConnectX.Relay</code> 的服务器的公网地址<br>修改 <code>Server:ListenPort</code> 为上面 <code>ConnectX.Server</code> 的监听端口，默认为 <code>3535</code><br>修改 <code>Server:ServerId</code> 为上面 <code>ConnectX.Server</code> 的 <code>ServerId</code><br>如果你将 <code>ConnectX.Relay</code> 和 <code>ConnectX.Server</code> 放在一个服务器上运行，则保留原有配置 <code>127.0.0.1</code> ，否则请修改 <code>Server:ListenAddress</code> 为上面 <code>ConnectX.Server</code> 的公网地址，以便访问</p><blockquote><p>[!IMPORTANT]<br><code>ConnectX.Relay</code> 可以有多个部署在不同的服务器上，连接到同一个 <code>ConnectX.Server</code></p></blockquote><ol start="4"><li><p>放行 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code> 的端口 (Tcp&#x2F;Udp)，默认分别为 <code>3535</code> 和 <code>3536</code></p></li><li><p>运行 <code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code></p></li></ol><p>若 <code>ConnectX.Server</code> 输出中出现  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[25-03-16 11:48:56 INF]: [ZTNodeService] Fetching ZT server node status...</span><br><span class="line">[25-03-16 11:48:56 INF]: [ZTNodeService] Node status received, ID [495b749d3c] Version [1.14.2]</span><br><span class="line">[25-03-16 11:48:57 INF]: [CLIENT_MANAGER] Watchdog started.</span><br></pre></td></tr></table></figure><p>则 <code>ConnectX.Server</code> 成功连接到 Zerotier 控制器</p><p>若 <code>ConnectX.Relay</code> 输出中出现  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[25-03-16 11:49:03 INF]: [CLIENT] Sending signin message to server...</span><br><span class="line">[25-03-16 11:49:04 INF]: [CLIENT] Connected and signed to server at endpoint 127.0.0.1:3535</span><br><span class="line">[25-03-16 11:49:04 INF]: [CLIENT] Server public address acquired [xxx.xx.xx.xx:3536]</span><br><span class="line">[25-03-16 11:49:04 INF]: [CLIENT] Successfully registered relay server.</span><br></pre></td></tr></table></figure><p>则 <code>ConnectX.Relay</code> 服务成功连接到 <code>ConnectX.Server</code> 服务</p><h3 id="至此完成"><a href="#至此完成" class="headerlink" title="至此完成"></a>至此完成</h3><p><code>ConnectX.Server</code> 以及 <code>ConnectX.Relay</code> 的守护进程等配置在此不再过多赘述  </p><p>使用 <code>ConnectX.Client</code> 连接时请使用 <code>ConnectX.Server</code> 的公网地址和端口进行连接  </p>]]></content>
      
      
      <categories>
          
          <category> DotNet-开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Minecraft </tag>
            
            <tag> .NET 9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 使用 VMware 17 Pro 安装 Mac OS，搭建 iOS 开发环境</title>
      <link href="/2024/10/27/Windows-%E4%BD%BF%E7%94%A8-VMware-17-Pro-%E5%AE%89%E8%A3%85-Mac-OS%EF%BC%8C%E6%90%AD%E5%BB%BA-iOS-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/10/27/Windows-%E4%BD%BF%E7%94%A8-VMware-17-Pro-%E5%AE%89%E8%A3%85-Mac-OS%EF%BC%8C%E6%90%AD%E5%BB%BA-iOS-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h4 id="本文参考文章"><a href="#本文参考文章" class="headerlink" title="本文参考文章"></a>本文参考文章</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/663874133">【2023最新版】VMware Workstation Pro v17安装教程+激活秘钥</a><br><a href="https://zhuanlan.zhihu.com/p/658521465">Windows用VM虚拟机安装MacOS Ventura 13.6系统全流程教程</a>  </p></blockquote><h3 id="前言与其他方案论述"><a href="#前言与其他方案论述" class="headerlink" title="前言与其他方案论述"></a>前言与其他方案论述</h3><p>在最开始选择在 Windows 搭建 iOS 开发环境时，尽管 VMware 虚拟机（或是 Hyper-V）运行 Mac OS 的方案已经很多，但我第一选择没有选择它（尽管最后兜了一圈还是绕回来了）</p><p><strong>先来说说 VMware 方案的缺点</strong>  </p><ol><li>VMware 原生不支持 Mac OS 的安装，是需要使用第三方 Unlocker 之后才能创建 Mac OS 的虚拟机</li><li>VMware 虚拟机运行的 Mac OS 事实上没办法调用显卡，也没任何方法安装显卡驱动或是借助某些手段间接调用显卡，这使得其对 CPU 的性能要求非常高</li><li>VMware Tools 对于显示渲染的优化似乎并不好，甚至是负优化。在我测试时安装 VMware Tools 后，反而导致虚拟机容易崩溃，貌似因为反复渲染而导致虚拟机死机</li></ol><p><strong>VMware 方案的优点</strong></p><ol><li>VMware（或 Hyper-V 等）虚拟机方便管理与保存虚拟机状态</li><li>VMware（或 Hyper-V 等）虚拟机能够直接连接物理 USB，从而能从虚拟机调试物理设备（这是最为重要的）</li></ol><p>最开始时我首先考虑到了 VMware 虚拟机的缺点，所以一开始采用的是 OSX-KVM 的方案<br>具体文章可以参考这两篇  </p><blockquote><p><a href="https://classsoft.net/archives/Smoothly-run-macOS-VMs-on-Windows10--with-WSL-and-QEMU-KVM.html">在Windows11 WSL上通过QEMU KVM流畅运行macOS虚拟机（2024）</a><br><a href="https://blog.hal.wang/7afa8fc1/">在 Windows 上流畅使用 MacOS 虚拟机</a></p></blockquote><p><strong>尽管 OSX-KVM 方案确实有它的好处</strong><br>例如：  </p><ol><li>由于 Linux 下的 KVM 能够通过虚拟 GPU 硬件，间接调用物理显卡，因此在显示性能上远远超过 VMware 方案</li><li>调用 GPU 渲染，因此大大减轻了 CPU 的负载</li></ol><p><strong>但是！在我一遍遍排除万难在 Windows 11 上安装了 Wsl2，又在 Wsl 里面成功配置了 KVM 虚拟机，又成功安装 Mac OS 到了 KVM 虚拟机之后，最终才发现 USB 总线没办法透过两层虚拟机传给 Mac OS，这意味我没办法进行实机调试和安装，最终放弃了这个方案</strong></p><blockquote><p>当然如果只是想在 Windows 上体验 Mac OS，你可以选择此方案，只是稍微有些折腾，但是是可行的（我实测过可以，但过程有些痛苦）</p></blockquote><h3 id="安装-VMWare-17-Pro-虚拟机"><a href="#安装-VMWare-17-Pro-虚拟机" class="headerlink" title="安装 VMWare 17 Pro 虚拟机"></a>安装 VMWare 17 Pro 虚拟机</h3><p>安装虚拟机和过程在此不赘述，因为相关文章太多了<br>这里提供一篇安装步骤参考文章，以及找到的一个城通网盘的 VMWare 17 Pro 下载链接<br><em>（目前 VMware 被收购之后，下载软件本体变得极为困难，那个破登录、许可证始终搞不好）</em>  </p><p><a href="https://zhuanlan.zhihu.com/p/663874133">【2023最新版】VMware Workstation Pro v17安装教程+激活秘钥</a><br><a href="https://545c.com/d/7369060-52756935-0f8a8d">城通网盘 VMware17</a>  </p><h3 id="在-VMware-虚拟机中安装-Mac-OS"><a href="#在-VMware-虚拟机中安装-Mac-OS" class="headerlink" title="在 VMware 虚拟机中安装 Mac OS"></a>在 VMware 虚拟机中安装 Mac OS</h3><p>这里提供 Unlocker GitHub 下载地址，以及两个 Mac OS 的安装镜像，分别是 13 Ventura 和 14 Sonoma  </p><p><a href="https://github.com/DrDonk/unlocker/releases">[GitHub Releases] Unlocker 4.2.7</a><br><a href="https://download2390.mediafire.com/6nv18jgzbzkgFHkjejBmYTrFY2R_m_oOB0jswGjQK5WXIa_CPxyeYYiwCxgB3KynQxb0JySfjwrqWEgQpJqIoKvLky_bdcZnOCIdNzCBjo_-7Fqo6yCD0bHjszxpmK1PFFfWGgxSJ4hgB8SsJMlKaGPaLW3Aw4a8i3jNj0jrju52EF4W/dcji26zay7s3p8r/macOS+Ventura+ISO+for+VM+by+techrechard.com.iso">[mediafire] macOS Ventura ISO for VM by techrechard.com.iso</a><br><a href="https://download2438.mediafire.com/0xh6gfoh7vdgDbb5RDXM-9hY8glz8qexIGeY3iurbafC0yfjOxEqCo3JwOmmgwv5TQekTAydtanpqBzRCshZLjvCscoq9RL5hmHMYLotXYddqxQ8Pbw28ejhAeE5abz8659XyJBBO8McEa8XR0t2XTgsJdo_0m412uQ2c7zjuTOJ/vku90kjifs1fmu0/macOS+Sonoma+ISO+by+techrechard.com.iso">[mediafire] macOS Sonoma ISO by techrechard.com.iso</a>  </p><blockquote><p>我个人建议选择 14 Sonoma 的镜像安装，<br>因为这个 13 Ventura 的镜像最高支持的 Xcode 版本是 <code>Xcode 14.3.1</code> 而它最多支持到 <code>iOS 16.4</code>，<br>现在最新的都已经是 <code>iOS 18.1</code>，像我自己的设备是 <code>iOS 17.4</code>，用 Ventura 完全没法开发，<br>而 <code>macOS Sonoma 14.5</code> 则支持最新的 <code>iOS 18.1</code>（提供的镜像是 14.0 的需要自己更新系统）  </p></blockquote><p>具体安装请参考这篇文章<br><a href="https://zhuanlan.zhihu.com/p/658521465">Windows用VM虚拟机安装MacOS Ventura 13.6系统全流程教程</a></p><h3 id="配置-Mac-OS-虚拟机的序列号"><a href="#配置-Mac-OS-虚拟机的序列号" class="headerlink" title="配置 Mac OS 虚拟机的序列号"></a>配置 Mac OS 虚拟机的序列号</h3><p>在上一步安装 Mac OS 的步骤教程中，有一步是让你往虚拟机配置文件中添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">board-id.reflectHost = &quot;FALSE&quot;</span><br><span class="line">board-id = &quot;Mac-AA95B1DDAB278B95&quot; </span><br><span class="line">hw.model.reflectHost = &quot;FALSE&quot; </span><br><span class="line">hw.model = &quot;MacBookPro19,1&quot; </span><br><span class="line">serialNumber.reflectHost = &quot;FALSE&quot; </span><br><span class="line">serialNumber = &quot;C01234567890&quot;</span><br></pre></td></tr></table></figure><p>这一段配置其实就是在配置虚拟机的序列号，但是很明显上面的序列号代码 <code>serialNumber</code> 是乱写的</p><p><strong>为什么要配置序列号代码</strong>  </p><p>因为在高版本 Mac OS 登录 App Store 的时候会验证你的机器码（主要包括主板 Id，机器序列号，BIOS 序列号等）<br>如果乱写，或是三个对不上的话，是没办法登录 App Store 的<br>下面找了一段实测可以使用的机器码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">board-id.reflectHost = &quot;FALSE&quot;</span><br><span class="line">board-id = &quot;Mac-94245B3640C91C81&quot;</span><br><span class="line">hw.model.reflectHost = &quot;FALSE&quot;</span><br><span class="line">hw.model = &quot;MacBook Pro&quot;</span><br><span class="line">serialNumber.reflectHost = &quot;FALSE&quot;</span><br><span class="line">serialNumber = &quot;C02JJ8B3DH2G&quot;</span><br><span class="line">smbios.reflectHost = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure><p>当然你也可以使用其他的 <em>三码工具</em> 来生成正确的机器码<br>例如 <a href="https://blog.csdn.net/Z17362251225/article/details/125891385">黑苹果自动获取与注入三码的方法，附相关工具，解锁iCloud变白果！</a><br>不过我们只需要拿到生成好的三码，之后写入到上面的配置文件的对应位置，不需要用那些注入工具</p><h3 id="关于-VMware-Tools"><a href="#关于-VMware-Tools" class="headerlink" title="关于 VMware Tools"></a>关于 VMware Tools</h3><p>我自己在使用的时候发现安装了 <code>VMware Tools</code> 之后容易导致虚拟机一些渲染问题<br>同时加重了渲染负担，容易导致虚拟机渲染卡死，崩溃等问题  </p><blockquote><p><strong>我个人认为是不建议安装的</strong>，尽管不装它也会导致一些问题，比如无法调整分辨率之类的，也请各位酌情考虑是否安装  </p></blockquote><h3 id="VMware-虚拟机优化"><a href="#VMware-虚拟机优化" class="headerlink" title="VMware 虚拟机优化"></a>VMware 虚拟机优化</h3><p>有许多方案从不同的角度对虚拟机进行优化</p><ol><li>使用 beamoff， 参考安装 Mac OS 教程流程的第六步</li><li>修改最小化动画，参考 <a href="https://jingyan.baidu.com/article/3aed632e64f485311180910f.html">苹果电脑设置应用最小化窗口时动画效果？</a></li><li>使用 Onyx，参考 <a href="https://blog.csdn.net/Deng_Xian_Sheng/article/details/124533828">优化不必要的动画，以减少Mac卡顿</a></li></ol><h3 id="Xcode-开发环境配置"><a href="#Xcode-开发环境配置" class="headerlink" title="Xcode 开发环境配置"></a>Xcode 开发环境配置</h3><h4 id="安装-Xcode"><a href="#安装-Xcode" class="headerlink" title="安装 Xcode"></a>安装 Xcode</h4><p>请在此处选择合适版本的 Xcode 软件包下载并进行安装<br><a href="https://developer.apple.com/download/all/">More Downloads</a></p><h4 id="安装-iOS-模拟器"><a href="#安装-iOS-模拟器" class="headerlink" title="安装 iOS 模拟器"></a>安装 iOS 模拟器</h4><p><strong>首先需要强调的是，任何 iOS 真机调试，都需要 iOS 对应版本的模拟器</strong><br>尽管 Xcode 安装时，会自带勾选一个该 Xcode 版本发布时最新的 iOS 版本的模拟器，但是这在大多数情况下都不适合真机调试<br>所以更多的你需要安装对应版本的 iOS 模拟器，你可以手动安装，就像下面这篇文章一样，你也可以在连接 iPhone 时，通过连接提示来安装对应的模拟器  </p><p>关于手动安装请参考 <a href="https://blog.csdn.net/RreamigOfGirls/article/details/138581052">Xcode15真机调试iOS17的方法</a></p><h4 id="连接-iPhone-到-Mac-OS"><a href="#连接-iPhone-到-Mac-OS" class="headerlink" title="连接 iPhone 到 Mac OS"></a>连接 iPhone 到 Mac OS</h4><p>直接连接 iPhone 到电脑，在虚拟机已经启动的时候，第一次连接时 iPhone 会提示是否连接此设备到虚拟机，此时点击是即可，或者也可以在 iPhone 已连接到电脑后，在 VMware 虚拟机窗口的右下角，找到一排图标，其中找到手机的图标，右键它打开菜单选择连接</p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p><strong>至此完成了整个开发环境的搭建</strong><br>过程十分艰难，我在此也只是概述其中步骤，并之抓了几个注意点阐述，更多的还是需要网上查阅大量的资料，结合自身情况考虑每一步操作</p><p><img src="/images/2024-10-28/1.png" alt="展示 1" title="属性"><br><img src="/images/2024-10-28/2.png" alt="展示 2" title="Xcode 连接 iPhone"></p>]]></content>
      
      
      <categories>
          
          <category> 开发实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> VMware </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 hexo + github pages 搭建个人博客</title>
      <link href="/2024/10/23/%E4%BD%BF%E7%94%A8-hexo-github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/10/23/%E4%BD%BF%E7%94%A8-hexo-github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/">本文参考文章地址</a></p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h3><p>创建一个名为 <code>&lt;username&gt;.github.io</code> 的仓库，其中 <code>&lt;username&gt;</code> 替换为你自己的用户名称<br>例如我的仓库 <a href="https://github.com/natsurainko/natsurainko.github.io">natsurainko.github.io</a></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>在创建的 <code>&lt;username&gt;.github.io</code> 仓库下新建一个分支 <code>source</code> 用于存放你 <code>hexo</code> 的源代码，<br>而原分支 <code>main</code> 等下将用于 <code>GitHub Pages</code> 的部署</p><h3 id="本地部署-hexo"><a href="#本地部署-hexo" class="headerlink" title="本地部署 hexo"></a>本地部署 hexo</h3><p>克隆 <code>&lt;username&gt;.github.io</code> 仓库到本地，并切换到 <code>source</code> 分支<br>在此目录下运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>命令会在仓库目录下新建文件夹 <code>/blog</code><br>并初始化 hexo 及其配置文件<br>接下来尝试运行这条命令来启动 hexo 本地服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>成功运行的话就算本地配置成功了<br>你可以将现在这部分的代码提交上分支进行保存</p><h3 id="配置-hexo-主题"><a href="#配置-hexo-主题" class="headerlink" title="配置 hexo 主题"></a>配置 hexo 主题</h3><p>引用的帖子里面使用 Next 主题，<br>但如你所见，我自己搭建时使用的是 <code>安知鱼主题</code> 具体配置步骤可以看<a href="https://docs.anheyu.com/initall.html">这篇文档</a>  </p><blockquote><p>其他 hexo 主题可以看官方<a href="https://hexo.io/themes/">主题浏览页面</a></p></blockquote><p>但配置 hexo 主题基本步骤基本都相同，就是<br>克隆主题仓库到 <code>/blog/themes/&lt;theme&gt;</code> ，其中 <code>&lt;theme&gt;</code> 为这个主题的名称<br>然后修改文件 <code>/blog/_config.yml</code>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">&lt;theme&gt;</span></span><br></pre></td></tr></table></figure><p>然后重新运行 <code>hexo server</code> 应用主题  </p><p>对于每个主题的细节配置，请修改这个文件 <code>/blog/themes/&lt;theme&gt;/_config.yml</code>，<br>每个主题的 <code>_config.yml</code> 并不相同，具体配置不在此赘述</p><h3 id="修改、添加博客内容"><a href="#修改、添加博客内容" class="headerlink" title="修改、添加博客内容"></a>修改、添加博客内容</h3><p>对于个人信息，站点标题之类的配置，请修改文件 <code>/blog/_config.yml</code><br>具体参见<a href="https://hexo.io/docs/configuration.html">官方配置文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;natsurainko 的博客&quot;</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;Forever young erver strong ever brave&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;这里能看到我的一些开发经历和一些开发教程，&lt;br&gt;希望能对你有所帮助&quot;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Natsurainko</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>创建一篇新文章或者新的页面，请在 <code>/blog</code> 目录下运行这条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>具体参见<a href="https://hexo.io/zh-cn/docs/writing">官方写作文档</a></p><h3 id="部署-hexo-到-GitHub-Pages"><a href="#部署-hexo-到-GitHub-Pages" class="headerlink" title="部署 hexo 到 GitHub Pages"></a>部署 hexo 到 GitHub Pages</h3><p>请先修改文件 <code>/blog/_config.yml</code>，例如  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>再安装部署工具 <code>hexo-deployer-git</code>，在 <code>/blog</code> 文件夹下运行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>最后再运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean      <span class="comment">#清除之前生成的东西</span></span><br><span class="line">hexo generate   <span class="comment">#生成静态文章，缩写hexo g</span></span><br><span class="line">hexo deploy     <span class="comment">#部署文章，缩写hexo d</span></span><br></pre></td></tr></table></figure><blockquote><p>[!CAUTION] 注意<br><code>hexo deploy</code> 命令会覆写仓库下 <code>main</code> 分支之前所有的提交，<br>所以最开始不建议将代码文件直接放在 <code>main</code> 分支下<br>且该命令会创建 <code>/blog/.deploy_git</code> 文件夹，用于存放之前的提交，<br>如果删除了这个文件夹，下一次部署的时候之前的提交记录就会丢失</p></blockquote><h3 id="至此完成部署"><a href="#至此完成部署" class="headerlink" title="至此完成部署"></a>至此完成部署</h3><p>请访问 <code>http://&lt;username&gt;.github.io</code> 以访问你的博客</p>]]></content>
      
      
      <categories>
          
          <category> 开发实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github-pages </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/23/hello-world/"/>
      <url>/2024/10/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
